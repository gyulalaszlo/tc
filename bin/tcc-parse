#!/usr/bin/env node

var winston = require('winston');
var program = require('commander');
var coffee = require('coffee-script/register');
var compiler = require('../src/compiler');
var Bench = require('../src/bench');

var bench = new Bench( "tcc-parse", true);

//
// Configure CLI output on the default logger
//
winston.cli();


program
  .option( '-R, --root [dir]', 'The root of the package tree', 'examples' )
  .option( '-p, --save-parse-tree', 'Save the parsed tree and stop.', false )
  .option( '-t, --save-type-tree', 'Save the type tree', false )

  .option( '-n, --save-normalized-form', 'Save the normalized form of types', false )

  .option( '-G, --rebuild-grammar', 'Save the normalized form of types', false )

  .option('-v, --verbose', 'More status messages.')
  .parse(process.argv);

var pkgs = program.args;
if (!pkgs.length) {
  console.error('packages argument required required');
  process.exit(1);
}

compiler.compile_packages(pkgs, program, function( err, result){
  bench.stop();
  winston.info( "Result: ", result )
  if(err){
    winston.error("ERROR:",  err.toString() );
    winston.error("");
    winston.error("(LINES FROM async.js OMITTED. USE -v TO SHOW THEM)");
    winston.error("");
    var lines = (err.stack.split(/\n/));
    for (var i=0,len=lines.length; i < len; ++i) {
      if (/async\.js/.test( lines[i])) {
        if (program.verbose)
        {
          winston.error('  -> ' + lines[i]);
        }
      } else {
        winston.error(lines[i]);
      }
    }
    process.exit(1);
  }
});
