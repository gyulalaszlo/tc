package stream_process;

""" A histogram for character streams. """
type U8Histogram = class {
  values: U32[256]
  list: List<U32>
}

public U8Histogram = {
  """ Create a blank histogram. """
  Constructor = ()-> { @initialize() }

  """ Add a list of characters to the histogram. """
  Add = (characters: List<U8>) {
    // iterate over each character using List.each
    characters.each( | c, _ )-> {
      // increment the count of the character
      @values[c] += 1
    }
  }

  """ Get a direct reference to the histogram data.  """
  Current = ()-> List<U32> {
    return @list
  }

  """ Copy the current state of the histogram. """
  NormalizedCopy = (alloc:Allocator*)-> List<U32> {
    // using the sum function
    sum := @list.sum()
    // and map using the allocator
    return @list.map<F64>( alloc | count, _ )-> {
      return F64(count) / F64(sum)
    }
  }

}

private U8Histogram = {
  // common initailzier
  initialize = ()->{
   @list = List<U32>.fromStaticArray(values)
  }
}

