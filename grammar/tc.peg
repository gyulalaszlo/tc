start
  = package:PackageDecl contents:Contents !. ->{{ COMPILATION_UNIT with package, contents }}

NL_CHARS = [\n\r]

COMMENT "Comment"
  = "//" (!NL_CHARS . )*


WS_PART
  = COMMENT
  / [\t\v\f\n\r \u00A0\uFEFF]+

WS "whitespace"
  = WS_PART*

SE "Statement Terminator ';'"
  = [;\n\r] WS?

////////////////////////////////////////////////////////////////////////////////

PackageDecl "Package declaration"
  = "package" WS name:Identifier SE ->{{ PACKAGE with  name }}


Contents "Compilation Unit contents"
  = declarations:StatementList ->{{ CONTENTS with declarations }}


StatementList "Statement List"
  = Statement*

Statement "Statement"
  = TypeStatement
  / MethodList

////////////////////////////////////////////////////////////////////////////////

TypeStatement "Type Statement"
  //= name:TypeStatementDeclaration "=" WS definition:TypeDefinition_ SE // { return ["TYPEDECL", name, definition]; }
  = name:TypeStatementDeclaration "=" WS definition:TypeDefinition_ SE ->{{ TYPEDECL with name, definition }}


TypeStatementDeclaration "Type Declaration"
  = "type" WS name: Identifier WS { return name; }


TypeDefinition_ "Type Definition"
  = s:StructDefinition_ { return s; }
  / a:AliasDefinition_ { return a; }
  / c:CTypeDefinition_ { return c; }
  / d:ClassDefinition_ { return d; }

////////////////////////////////////////////////////////////////////////////////

ClassDefinition_
  = "class" WS fields:StructFieldList_ ->{{ CLASS with fields }}


////////////////////////////////////////////////////////////////////////////////
StructDefinition_
  = "struct" WS fields:StructFieldList_ ->{{ STRUCT with fields }}


StructFieldList_
  = "{" WS fields:FieldDeclaration* "}" ->{{ FIELDS with fields }}


FieldDeclaration "Struct Field Declaration"
  = decl:VariableDeclaration_ SE { return decl; }

VariableDeclaration_ "Variable Declaration"
  = type:TypeName_ WS name:Identifier ->{{ VAR with type, name }}

////////////////////////////////////////////////////////////////////////////////

CTypeDefinition_ "A C type definition"
  = "C" WS c_name:TypeName_ ->{{ CTYPE with c_name  }}

////////////////////////////////////////////////////////////////////////////////

AliasDefinition_ "Alias"
  = "alias" WS original:TypeName_ ->{{ ALIAS with original }}

TypeName_ "Type Name"
  = name:Identifier  ->{{ TYPE with name }}

////////////////////////////////////////////////////////////////////////////////

Identifier "identifier"
  = text:IdentifierName  ->{{ IDENTIFIER with text }}

IdentifierName
  = start:[a-zA-Z_] cont:[a-zA-Z0-9_]* { return [start, cont.join("")].join(""); }

////////////////////////////////////////////////////////////////////////////////

MethodList "Method list"
  = access:MethodAccessor WS name:Identifier
    WS "=" WS body:MethodListBody SE
    ->{{ METHODS with name, access, body }}

MethodListBody "Method List body"
  = "{" WS  decls:MethodDeclaration* "}" { return decls; }

MethodDeclaration "Method Declaration"
  = name:Identifier WS "=" WS func:FunctionDeclaration
    ->{{ METHOD with name, func }}

MethodAccessor "Method acess controll"
  = "public"
  / "protected"
  / "private"


FunctionDeclaration "Function declaration"
  = "fn" WS args:FunctionArgList returns:FunctionReturnType body:FunctionBody
    ->{{ FUNC with args, body, returns }}

FunctionArgList "Type list for function parameters/return values"
  = "(" WS args:FunctionDeclarationArgumentList ")" WS { return args; }

FunctionReturnType
  = list: TypeList { return list; }

FunctionDeclarationArgumentList
  = first:FunctionArgumentFirst WS more:FunctionArgumentMore*
    //{ return [ "ARGS", [first].concat( more ) ];}
    { return { _type: "ARGS", list: [first].concat( more ) };}
  / { return { _type: "ARGS", list: []} }

FunctionArgumentFirst
  = decl:VariableDeclaration_ ->{{ ARG with decl }}


FunctionArgumentMore
  = ',' WS decl:VariableDeclaration_ WS ->{{ ARG with decl }}


FunctionBody
  = "{" WS  "}" WS { return []; }


TypeList "A list of types"
  = first:Typename_ WS more:MoreTypes* { return { _type:"TYPELIST", list: [first].concat(more) }; }
  / { return {_type:"TYPELIST", list:[] }; }

MoreTypes = "," WS more:Typename_ WS

Typename_ "Type name"
  = name:Identifier ->{{ TYPENAME with name }}
